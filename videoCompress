#!/bin/bash

scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${scriptDir}/utils.sh"

scriptName="$(basename "$0")"
dateStamp=$(date --iso-8601="seconds")

function verifyContinue () {
	if [[ $_INTERACTIVE -eq 1 ]]; then
		read -p "Do you want to continue? [y/n] " -n 1 -r
		echo
		if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
			[[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
		fi
	fi
}

PARSED="$(getopt --options vdo: --long "verbose,debug,output:" -n "$scriptName" -- "$@")"
if [ $? != 0 ] ; then
	log "getopt has complained about wrong arguments to stdout"
	echo "Terminating..." >&2
	exit 1
fi
eval set -- "$PARSED"

_INTERACTIVE=1
_VERBOSE=0
_DEBUG=0
outputDir=resized
while true; do
	case "$1" in
		-v | --verbose ) _VERBOSE=1; shift ;;
		-d | --debug ) _DEBUG=1; shift ;;
		-o | --output ) outputDir="$2"; shift 2 ;;
		--start ) timeStartSec="$2"; shift 2 ;;
		--stop ) timeStopSec="$2"; shift 2 ;;
		-- ) shift; break ;;
		* ) break ;;
	esac
done

# Positional arguments
resolutionStr="${@:$OPTIND:1}"; shift;
pattern="${@:$OPTIND:1}"; shift;

if [ -z "$resolutionStr" ]; then
	echo "ERROR: Missing required argument 1: image resolution string"
	exit -1
fi

if [ -z "$pattern" ]; then
	pattern='*'
	echo "ERROR: Missing required argument 2: file name pattern. Using default pattern: ${pattern}"
fi

if [ -d "$outputDir" ]; then
	echo "WARNING: Output directory \"${outputDir}\" already exists."
	verifyContinue
fi
mkdir "$outputDir" 2>&1 > /dev/null

echo "Output directory = $outputDir"
echo "File name pattern = $pattern"
echo "Resize resolution = $resolutionStr"

maxWidth=$(echo $resolutionStr | cut -d 'x' -f 1)
maxHeight=$(echo $resolutionStr | cut -d 'x' -f 2)

path=.
allFiles=$(find "$path" -maxdepth 1 -name "$pattern" -type f)
declare -a fileList=()
IFS=$'\n'
for f in ${allFiles}; do
	isVideo=$(mediainfo "$f" | grep -oP '^Video$')
	if [ -n "$isVideo" ]; then
		fileList+=($f)
	fi
done
unset IFS

numFiles=0
IFS=$'\n'
for f in "${fileList[@]}"; do
	numFiles=$((numFiles+1))
	outFile="${f##*/}"
	outFull="${outputDir}/${outFile}"
	orientation=$(exiftool -Rotation "$f" | perl -ne 's |^Rotation\s+:\s+([0-9]+)$|\1| and print')
	printf "Resizing #%d: \"%s\" (%d deg) to \"%s\"\n" "$numFiles" "$outFile" "$orientation" "$outFull"

	if [ "$orientation" -eq "0" ]; then
		rotate=0
	elif [ "$orientation" -eq "90" ]; then
		rotate=4
	elif [ "$orientation" -eq "180" ]; then
		rotate=3
	elif [ "$orientation" -eq "270" ]; then
		rotate=7
	else
		echo "Error: Unexpected orientation: ${orientation}"
		rotate=0
	fi
	# echo "Orientation is ${orientation}. Passing ${rotate} to HandBrakeCLI."

	if [ -n "$timeStartSec" ]; then
		handbrakeTimeStartSec="--start-at duration:${timeStartSec}"
	fi
	if [ -n "$timeStopSec" ]; then
		handbrakeTimeStopSec="--stop-at duration:${timeStopSec}"
	fi

	# quality: Lower number is higher quality
	# pfr (Peak Frame Rate): Will not increase frame rate. Prevents frame rate from exceeding this value.
	command HandBrakeCLI \
		-i "$f" \
		-o "$outFull" \
		--encoder mpeg4 \
		--gain 24 \
		--ab 64 \
		--maxWidth "$maxWidth" \
		--maxHeight "$maxHeight" \
		--format av_mp4 \
		--quality 4 \
		--mixdown mono \
		--rotate=${rotate} \
		$handbrakeTimeStartSec \
		$handbrakeTimeStopSec \
		--pfr 29 \
		1>/dev/null 2>/dev/null

	srcInfo="$(du --human-readable "$f" | cut -f 1 2>/dev/null)"
	dstInfo="$(du --human-readable "$outFull" | cut -f 1 2>/dev/null)"
	printf "Resized #%s: \"%s\" (%s) to \"%s\" (%s)\n" "$numFiles" "$outFile" "$srcInfo" "$outFull" "$dstInfo"
done
unset IFS
